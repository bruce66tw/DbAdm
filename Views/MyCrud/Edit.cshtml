@using Base.Models
@using Base.Services
@{
    var cols2 = "4,6";     //2 columns per row
}

<style>
    /* set scroll table column width(base 1) */
    #tableItem th:nth-child(1), #tableItem td:nth-child(1) {
        flex-basis: 60px;
    }

    #tableItem th:nth-child(2), #tableItem td:nth-child(2) {
        flex-basis: 200px;
    }
    /* 取餘下寬度 */
    #tableItem th:nth-child(3), #tableItem td:nth-child(3) {
        flex-grow: 1;
    }
</style>

<!-- main table edit form -->
<form id='formEdit' class='xg-form'>
    @await Component.InvokeAsync("XiHide", new { fid = "Id" })

    <div class="row">
        <!-- left columns -->
        <div class="col-md-6">
            @await Component.InvokeAsync("XiSelect", new { title = "專案", fid = "ProjectId", rows = (List<IdStrDto>)ViewBag.Projects, required = true, cols = cols2, prop = new PropSelectDto() { FnOnChange = "_me.onChangeProject()" } })
            @await Component.InvokeAsync("XiSelect", new { title = "資料表", fid = "TableId", required = true, cols = cols2 })
            @await Component.InvokeAsync("XiText", new { title = "功能名稱", fid = "FunName", maxLen = 10, required = true, cols = cols2 })

            <div class="row">
                <div class="col-md-4 xg-label">功能</div>
                <div class="col-md-8" style="padding-top:5px;">
                    @await Component.InvokeAsync("XiCheck", new { fid = "HasCreate", isCheck = true, label = "新增" })
                    @await Component.InvokeAsync("XiCheck", new { fid = "HasUpdate", isCheck = true, label = "修改" })
                    @await Component.InvokeAsync("XiCheck", new { fid = "HasDelete", isCheck = true, label = "刪除" })
                    @await Component.InvokeAsync("XiCheck", new { fid = "HasView", isCheck = true, label = "檢視" })
                    @await Component.InvokeAsync("XiCheck", new { fid = "HasExport", isCheck = true, label = "匯出" })
                    @await Component.InvokeAsync("XiCheck", new { fid = "HasReset", isCheck = true, label = "重設" })
                </div>
            </div>
            @await Component.InvokeAsync("XiCheck", new { title = "資料狀態", fid = "Status", isCheck = true, label = "啟用", cols = cols2 })
        </div>

        <!-- right columns -->
        <div class="col-md-6">
            @await Component.InvokeAsync("XiSelect", new { title = "權限種類", fid = "AuthType", rows = (List<IdStrDto>)ViewBag.AuthTypes, required = true, cols = cols2 })
            @await Component.InvokeAsync("XiRadios", new { title = "查詢Label位置", fid = "LabelHori", rows = _Str.ToIdStrs("1,水平,0,垂直"), cols = cols2 })
            @await Component.InvokeAsync("XiText", new { title = "資料表別名", fid = "TableAs", maxLen = 10, cols = cols2, tip = "table alias name" })
            @await Component.InvokeAsync("XiTextArea", new { title = "讀取資料 Sql", fid = "ReadSql", cols = "4,8", prop = new PropTextAreaDto() { RowsNum = 5 } })
        </div>
    </div>
</form>

<!-- find buttons -->
<div class="xg-btns-box">
    <span class="xg-block-label">查詢條件欄位</span>
    <button type='button' class='btn xg-btn' onclick='_me.onOpenItem("Q")'>選取欄位</button>
</div>

<!-- find field -->
<form id='formEditQitem' class='xg-form' style="border:none">
    <table class="table table-bordered xg-table xg-no-hline" cellspacing="0">
        <thead>
            <tr>
                <th>欄位</th>
                <th>欄位名稱</th>
                <th>欄位類別</th>
                <th>資料表別名</th>
                <th>欄位種類</th>
                <th>欄位資料</th>
                <th>比對方式</th>
                <th>其他屬性</th>
                @await Component.InvokeAsync("XgTh", new { title = "起迄", tip = "是否包含起迄欄位, 通常用於日期欄位" })
                @await Component.InvokeAsync("XgTh", new { title = "群組", tip = "相同的群組將排在同一列" })
                @await Component.InvokeAsync("XgTh", new { title = "佈局", tip = "Label,欄位寬度(逗號分隔)" })
                @await Component.InvokeAsync("XgTh", new { title = "進階", tip = "以下為進階查詢畫面欄位" })
                <th>操作</th>
            </tr>
        </thead>
        <!-- body 搭配 tplQitem -->
        <tbody id="divQitemBody"></tbody>
    </table>
</form>

<!--template: 編輯畫面 Qitem -->
<script id="tplQitem" type="text/template">
    <tr class="xu-tr">
        @await Component.InvokeAsync("XiHide", new { fid = "Id" })
        @await Component.InvokeAsync("XiHide", new { fid = "CrudId" })
        @await Component.InvokeAsync("XiHide", new { fid = "ColumnId" })
        @await Component.InvokeAsync("XiHide", new { fid = "Sort" })

        <td>{{Name}}</td>
        <td>{{Cname}}</td>
        <td width="120px">{{DataType}}</td>
        <td width="80px">@await Component.InvokeAsync("XiText", new { fid = "TableAs" })</td>
        <td width="200px">@await Component.InvokeAsync("XiSelect", new { fid = "InputType", rows = (List<IdStrDto>)ViewBag.InputTypes })</td>
        <td width="90px">@await Component.InvokeAsync("XiText", new { fid = "InputData" })</td>
        <td width="150px">@await Component.InvokeAsync("XiSelect", new { fid = "Op", rows = (List<IdStrDto>)ViewBag.QitemOps })</td>
        <td width="100px">@await Component.InvokeAsync("XiText", new { fid = "ExtInfo" })</td>
        <td width="60px" class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "IsRange" })</td>
        <td width="60px">@await Component.InvokeAsync("XiText", new { fid = "PosGroup" })</td>
        <td width="80px">@await Component.InvokeAsync("XiText", new { fid = "LayoutCols" })</td>
        <td width="60px" class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "IsFind2" })</td>
        <td width="100px" class="text-center">@await Component.InvokeAsync("XgDeleteUpDown", "_me.mQitem")</td>        
    </tr>
</script>

<!-- 查詢結果欄位button -->
<div class="xg-btns-box">
    <span class="xg-block-label">查詢結果欄位</span>
    @await Component.InvokeAsync("XgAddRow", "_me.onRitemAdd()")
    <button type='button' class='btn xg-btn' onclick='_me.onOpenItem("R")'>選取欄位</button>
</div>


<!-- 查詢結果欄位 -->
<form id='formEditRitem' class='xg-form' style="border:none">
    <table class="table table-bordered xg-table xg-no-hline" cellspacing="0">
        <thead>
            <tr>
                <th>欄位</th>
                <th>欄位名稱</th>
                @*Html.XgTh("欄位寬度(px)", "0或空白表示寬度為自動調整")*@
                @await Component.InvokeAsync("XgTh", new { title = "欄位寬度(px)", tip = "0或空白表示寬度為自動調整" })
                <th>欄位種類</th>
                <th>欄位資料</th>
                <th>操作</th>
            </tr>
        </thead>
        <!-- body 搭配 tplRitem -->
        <tbody id="divRitemBody"></tbody>
    </table>
</form>

<!--template: 編輯畫面 Ritem -->
<script id="tplRitem" type="text/template">
    <tr class="xu-tr">
        @*
        @Html.XiHide("Id")
        @Html.XiHide("CrudId")
        @Html.XiHide("Sort")
        *@
        @await Component.InvokeAsync("XiHide", new { fid = "Id" })
        @await Component.InvokeAsync("XiHide", new { fid = "CrudId" })
        @await Component.InvokeAsync("XiHide", new { fid = "Sort" })

        <td width="180px">@await Component.InvokeAsync("XiText", new { fid = "ColumnName" })</td>
        <td width="180px">@await Component.InvokeAsync("XiText", new { fid = "Cname" })</td>
        <td width="100px">@await Component.InvokeAsync("XiNum", new { fid = "Width" })</td>        
        <td width="250px">@await Component.InvokeAsync("XiSelect", new { fid = "RitemType", rows = (List<IdStrDto>)ViewBag.RitemTypes })</td>
        <td>@await Component.InvokeAsync("XiText", new { fid = "ExtInfo" })</td>
        <td width="100px" class="text-center">@await Component.InvokeAsync("XgDeleteUpDown", "_me.mRitem")</td>
    </tr>
</script>

<!-- Table編輯畫面 nav/tab/buttons -->
<div class="xg-btns-box">
    <span class="xg-block-label">編輯畫面</span>
    <button type='button' class='btn xg-btn' onclick='_me.onEtableAdd()'>新增</button>
    <button type='button' class='btn xg-btn' onclick='_me.onEtableDelete()'>刪除</button>
    <button type='button' class='btn xg-btn' onclick='_me.onEtableLeft()'>左移</button>
    <button type='button' class='btn xg-btn' onclick='_me.onEtableRight()'>右移</button>
</div>
<ul class="nav nav-tabs" id="navEtable"></ul>
<div class="tab-content" id="tabEtable"></div>

@await Component.InvokeAsync("XgSaveBack")

<!-- template: 編輯畫面 nav, 使用 index 來串聯 nav tab -->
<script id="tplNavEtable" type="text/template">
    <li class='nav-item' data-index='{{Index}}'>
        <a class='nav-link' data-toggle='tab' href='#divEtable{{Index}}' onclick='_me.onEtableNav({{Index}})'>
        </a>
    </li>
</script>

<!-- template: CrudEdit 編輯畫面 tab, 佈局/寬度 2個欄位為動態切換 -->
<script id="tplTabEtable" type="text/template">
    <div class="tab-pane xu-edit" id="divEtable{{Index}}">
        <!-- xg-form also for myCrud.js -->
        <form class='xg-form' data-index="{{Index}}" style="border:none; margin-top: 10px;">
            @*
                @Html.XiHide("Id")
                @Html.XiHide("Sort")
            *@
            @await Component.InvokeAsync("XiHide", new { fid = "Id" })
            @await Component.InvokeAsync("XiHide", new { fid = "Sort" })

            <div class="row">
                <div class="col-md-6">
                    @*Html.XiSelect("資料表", "TableId", "", null, true, cols2, "", new PropSelectDto() { FnOnChange = "_me.onChangeNowTable({{Index}})" })*@
                    @await Component.InvokeAsync("XiSelect", new { title = "資料表", fid = "TableId", required = true, cols = cols2, prop = new PropSelectDto() { FnOnChange = "_me.onChangeNowTable({{Index}})" } })
                    @*Html.XiText("主Key欄位", "Kid", "", 10, true, cols2)*@
                    @await Component.InvokeAsync("XiText", new { title = "主Key欄位", fid = "Kid", maxLen = 10, required = true, cols = cols2 })
                    @*Html.XiText("對應欄位", "MapFid", "", 10, false, cols2, "2nd Table則為必填")*@
                    @await Component.InvokeAsync("XiText", new { title = "對應欄位", fid = "MapFid", maxLen = 10, cols = cols2, tip = "2nd Table則為必填" })
                </div>
                <div class="col-md-6">
                    @*Html.XiText("資料排序", "OrderBy", "", 10, false, cols2, "不含 order by 關鍵字")*@
                    @await Component.InvokeAsync("XiText", new { title = "資料排序", fid = "OrderBy", maxLen = 10, cols = cols2, tip = "不含 order by 關鍵字" })
                    @*Html.XiCheck("Column 4", "Col4", false, "1", "是", cols2, "Creator, Created, Reviser, Revised 4個欄位")*@
                    @await Component.InvokeAsync("XiCheck", new { title = "Column 4", fid = "Col4", label = "是", cols = cols2, tip = "Creator, Created, Reviser, Revised 4個欄位" })
                </div>
            </div>
        </form>

        <div class="xg-btns-box">
            <span class="xg-block-label">編輯欄位</span>
            <button type='button' class='btn xg-btn' onclick='_me.onOpenItem("E")'>選取欄位</button>
        </div>
        <form class="xu-form2">
            <table class="table table-bordered xg-table xg-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        <th>欄位<br>欄位名稱</th>
                        <th>資料型態</th>
                        @*@await Component.InvokeAsync("XgTh", new { title = "欄位種類", tip = "若為下拉欄位, 則必須填欄位資料" })*@
                        <th>欄位種類</th>
                        @await Component.InvokeAsync("XgTh", new { title = "欄位資料", tip = "下拉欄位:資料來源, checkbox:label" })
                        <th>必填</th>
                        <th>新增</th>
                        <th>修改</th>
                        <th>提示</th>
                        <th>預設</th>
                        <th>驗証方式</th>
                        <th>驗証資料</th>
                        @*Html.XgTh("位置", "欄位值相同會排在同一列")*@
                        @await Component.InvokeAsync("XgTh", new { title = "位置", tip = "欄位值相同會排在同一列" })
                        <th class="xu-layout">佈局</th>
                        <th class="xu-width">寬度</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <!-- tbody tr 內容為 tplEitemTr -->
                <tbody></tbody>
            </table>
        </form>
    </div>
</script>

<!-- template: 編輯畫面 Eitem, xu-tr for myCrud.js, 顯示欄位用mustache render的方式填入 -->
<script id="tplEitemTr" type="text/template">
    <tr class="xu-tr">
        @*
        @Html.XiHide("Id", "{{Id}}")
        @Html.XiHide("ColumnId", "{{ColumnId}}")
        @Html.XiHide("Sort", "{{Sort}}")
        *@
        @await Component.InvokeAsync("XiHide", new { fid = "Id", value = "{{Id}}" })
        @await Component.InvokeAsync("XiHide", new { fid = "ColumnId", value = "{{ColumnId}}" })
        @await Component.InvokeAsync("XiHide", new { fid = "Sort", value = "{{Sort}}" })

        <td>{{Name}}<br>{{Cname}}</td>
        <td width="100px">{{DataType}}</td>
        <td width="120px">@await Component.InvokeAsync("XiSelect", new { fid = "InputType", rows = (List<IdStrDto>)ViewBag.InputTypes, required = true })</td>
        <td width="90px">@await Component.InvokeAsync("XiText", new { fid = "InputData" })</td>
        <td width="50px" class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "Required" })</td>
        <td width="50px" class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "HasCreate", isCheck = true })</td>
        <td width="50px" class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "HasUpdate", isCheck = true })</td>
        <td width="110px">@await Component.InvokeAsync("XiText", new { fid = "PlaceHolder" })</td>
        <td width="70px">@await Component.InvokeAsync("XiText", new { fid = "DefaultValue" })</td>
        <td width="110px">@await Component.InvokeAsync("XiSelect", new { fid = "CheckType", value = "0", rows = (List<IdStrDto>)ViewBag.CheckTypes, required = true, prop = new PropSelectDto() { AddEmptyRow = false } })</td>
        <td width="90px">@await Component.InvokeAsync("XiText", new { fid = "CheckData" })</td>
        <td width="60px">@await Component.InvokeAsync("XiText", new { fid = "PosGroup" })</td>
        <td width="80px" class="xu-layout">@await Component.InvokeAsync("XiText", new { fid = "LayoutCols" })</td>
        <td width="80px" class="xu-width">@await Component.InvokeAsync("XiNum", new { fid = "Width" })</td>        
        <td width="95px" class="text-center">@await Component.InvokeAsync("XgDeleteUpDown", "_me.mEitem")</td>
    </tr>
</script>

<!-- 多筆 row template, 必須設定寬度, Nullable欄位先設定 false(再由前端設定) -->
<!-- modal: Read item, 多個畫面共用 -->
<div id="modalItems" class="modal fade xg-modal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content" style="width:560px; height:520px;">
            <div class="modal-header">
                <div class="modal-title">選取查詢欄位</div>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="row xg-row" style="margin:5px 5px">
                    <div class="col-md-2 xg-right" style="padding-top: 6px;">
                        Table
                    </div>
                    <div class="col-md-6">
                        @*Html.XiSelect("", "TableId", "", (List<IdStrDto>)ViewBag.Tables, prop: new PropSelectDto() { FnOnChange = "_me.onChangeItemTable(this)" })*@
                        @await Component.InvokeAsync("XiSelect", new { fid = "TableId", rows = (List<IdStrDto>)ViewBag.Tables, prop = new PropSelectDto() { FnOnChange = "_me.onChangeItemTable(this)" } })
                    </div>
                    <div class="col-md-4 xg-right">
                        <button type="button" class="btn btn-primary" onclick="_me.onItemModalOk()">確定</button>
                    </div>
                </div>

                <!-- query result list -->
                <table id="tableItem" class="table table-bordered xg-table xg-table-vscroll" cellspacing="0" style="width:100%">
                    <thead>
                        <tr>
                            <th>選取</th>
                            <th>欄位</th>
                            <th>欄位名稱</th>
                        </tr>
                    </thead>
                    <!-- 搭配 tplItemTr -->
                    <tbody style="height:315px"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- template: modal Items list row, data 屬性不區分大小寫 !! -->
<script id="tplItemTr" type="text/template">
    <tr data-id='{{Id}}'
        data-name='{{Name}}'
        data-cname='{{Cname}}'
        data-datatype='{{DataType}}'>
        <td>
            <label class='xg-check'>
                <input name='check0' type='checkbox'>
                <span></span>
            </label>
        </td>
        <td>{{Name}}</td>
        <td>{{Cname}}</td>
    </tr>
</script>
