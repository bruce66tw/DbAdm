using Base.Enums;
using Base.Models;
using Base.Services;
using BaseWeb.Services;
using Microsoft.AspNetCore.Http;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace {{Project}}.Services
{
    public class {{Table}}Edit
    {
        private EditDto GetDto()
        {
            return new EditDto
            {
				{{#MainTable}}
				Table = "dbo.[{{Table}}]",
                PkeyFid = "{{PkeyFid}}",
			{{#unless HasCol4}}
                Col4 = null,
			{{/unless}}
                Items = new [] 
				{
				{{#Eitems}}
					{{ServiceStr}}
				{{/Eitems}}
                },
				{{/MainTable}}
			{{#if ChildTables}}
                Childs = new EditDto[]
                {
				{{#ChildTables}}
                    new EditDto
                    {
                        Table = "dbo.[{{Table}}]",
                        PkeyFid = "{{PkeyFid}}",
                        FkeyFid = "{{FkeyFid}}",
					{{#if OrderBy}}
						OrderBy = "{{OrderBy}}",
					{{/if}}
					{{#unless HasCol4}}
                        Col4 = null,
					{{/unless}}
                        Items = new [] 
						{
						{{#Eitems}}
						{{#if ServiceStr}}
							{{ServiceStr}}
						{{/if}}
						{{/Eitems}}
                        },
                    },
				{{/ChildTables}}
                },
			{{/if}}
            };
        }

        private CrudEdit Service()
        {
            return new CrudEdit(GetDto());
        }

        public JObject GetJson(string key)
        {
            return Service().GetJson(key);
        }

        {{#if HasFile}}
        //TODO: add your code
        //t03_FileName: t + table serial _ + fid
        public async Task<ResultDto> SaveCreateAsnyc(JObject json, List<IFormFile> t03_FileName)
        {
            var service = Service();
            var result = service.SaveCreate(json);
            if (_Valid.ResultStatus(result))
            {
                await _WebFile.SaveCrudFilesAsnyc(json, service.GetNewKey(), _Xp.GetDirUserLicence(), t03_FileName, nameof(t03_FileName));
            }
            return result;
        }

        //TODO: add your code
        //t03_FileName: t + table serial _ + fid
        public async Task<ResultDto> SaveUpdateAsnyc(string key, JObject json, List<IFormFile> t03_FileName)
        {
            var service = Service();
            var result = service.SaveUpdate(key, json);
            if (_Valid.ResultStatus(result))
            {
                await _WebFile.SaveCrudFilesAsnyc(json, service.GetNewKey(), _Xp.GetDirUserLicence(), t03_FileName, nameof(t03_FileName));
            }
            return result;
        }
        {{else}}
        public ResultDto SaveCreate(JObject json)
        {
            return Service().SaveCreate(json);
        }

        public ResultDto SaveUpdate(string key, JObject json)
        {
            return Service().SaveUpdate(key, json);
        }
        {{/if}}

        public ResultDto Delete(string key)
        {
            return Service().Delete(key);
        }

    } //class
}
